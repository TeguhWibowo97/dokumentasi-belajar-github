Framework laravel tutorial :
## Buat new Project laravel
  -> composer create-project --prefer-dist laravel/laravel NamaProject
  
1. Buat Model
  -> php artisan make:model NamaModel
  -> pada bagian Model 
      - protected $tabel = ['student']; // agar bisa akses tabel student       

2. Buat Controller
  -> php artisan make:controller NamaController
  -> php artisan make:controller NamaController -r (yg ini versi lengkap)
  -> jika membuat controller dlm sebuah folder maka php artisan make:controller pathName/controllerName
  
3. Buat Migration
  -> php artisan make:migration create_mahasiswa_table
  -> php artisan migrate (cara menerapkan migrasi ke database)
  -> lakukan hal ini agar tidak eror
            $table->String('tanggal',20);
            $table->String('keterangan',255);
            $table->String('dokumen',100);
            
  -> melakukan rollback atau membatalkan migration
      - php artisan migrate:rollback
      - php artisan migrate:rollback --step=5
      - php artisan migrate:reset
  -> pada widows biasa nya proses migrasi terjadi kendala solusi nya adalah
      - buka folder app, lalu buka file AppServiceProvider.php kemudian pada public function boot()
      - Schema::defaultStringLength(191);
      - dibagian atas tambahkan kode use Illuminate\Support\Facades\Schema;
 
4. sintak dasar dan fungsi pada laravel
  -> @yield('title') // untuk membuat data dinamis pada layout utama
  -> @section('title','Form Login') // Mengisikan title dengan isi Form login
 
5. LOOPING
  -> @foreach($student as $std )
        {{ $std->nisn }}
        {{ $std->nama }}
        {{ $std->alamat }}
     @endforeach

6. Menampilkan data 
  -> Route::get('/student','StudentController@index')
  -> pada controller
      $student = Student::all(); // mengambil semua data yang ada pada tabel student
      return view('student.tampil',['student'=>$student]); // mengirim data kedalam folder student dan file tampil.blade.php
      
      -==== Menggunakan where ====-
      -> pada controller
        $student = Student::where('jeniskelamin','perempuan')->get(); // hanya akan menampilkan data yang jeniskelaminnya perempuan
        return view('student.tampil',['student'=>$student]);
        
      -==== Menggunakan 2 where ====-
      -> Pada Controller
        $student = Student::where('nama','teguh')->orWhere('matkul','matematika')->get(); // hanya menampilkan semua data dengan nama teguh atau matematika
        return view('student.tampil',['student'=>$student]);
        return view('student.tampil',compact('student')); // untuk mengirim variabel ke view,, berlaku jika nama nya sama
        
7. cara insert to database :
  -> Route::get('/student/create','StudentController@index');
  -> create index.php di folder views
  -> buat controller dan model
  -> pada controller public function tambahData(Request $request){}
  -> pada Model gunakan kode berikut :
      - protected $table = "siswa"; // maka akan menampilkan file yg ada pada table siswa
        jika tidak menggunakan kode tersebut maka laravel akan otomatis mencari table dengan nama siswas
      - Protected $fillable = ['nama','alamat'];
        jika menggunakan kode tersebut maka hanya kolom nama dan alamat saja yg akan terisi
  -> Lalu pada CONTROLLER pada function create :
      - paling atas ketik kode berikut use\App\namaModel;
      - kemudian Msiswa::create($request->all());
      - return view('siswa.index');

8. Cara Hapus data pada table 
   -> buat route pada web Route::post('/siswa/hapus/{siswa}','SiswaController@hapus');
   -> pada controller tambahkan function 
      hapus(){
        Msiswa::destroy($id);
      }
      return redirect('/dashboard');
   -> Jika ingin menggunakan localhost says maka gunakan kode berikut:
      <a href="/siswa/hapus/{{$siswa->id}}" onclick="javascript:return confirm('apakah yakin akan menghapus data ?')">
        <button class="btn btn-danger">Hapus</button>
        

   
9. Clear cache ( Supaya memperbaiki data yg tidak terload)
  - php artisan cache:clear
  - php artisan config:clear
   
10. Membuat hidden request pada form POST
  - <input name="id_sponsor" type="hidden" value="{{$id}}">
   
   
11. Membuat string random digit
        $token = "";
        $codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $codeAlphabet.= "0123456789";

        for($i=0;$i<8;$i++){
            $token .= $codeAlphabet[mt_rand(0,strlen($codeAlphabet)-1)];
        }
        return $token;
   
12. Membuat form validasi
    - pada controller isikan code berikut
      $validated = $request->validate([
              'nama' => 'required|min:3|max:30',
              'email' => 'required|email',
          ],[
              'nama.required' => 'Inputan Nama tidak boleh kosong',
              'nama.min' => 'Inputan tidak boleh kurang dari 3 huruf',
              'nama.max' => 'Inputan tidak boleh lebih dari 30 huruf',
              'email.required' => 'Inputan email tidak boleh kosong',
          ]);
    - pada halaman depan isi code berikut
      <input type="text" name="nama" class="form-control @error('nama') is-invalid @enderror" value="{{old('nama')}}" placeholder="Nama Lengkap" >
      @error('nama')
      <div class="form-text text-danger small">{{ $message }}</div>
      @enderror
   
   
13. Mengambil hanya tanggal dan waktu pada created_at
    - hanya mengambil tanggal {{ $data['created_at']->format('d/m/Y') }}
    - hanya mengambil jam {{ $data['created_at']->format('H:i') }}
   
14. Membuat flashdata atau alert notifikasi
    - pada controller berikan code berikut: return redirect('/login')->with('status','Username atau Password salah !!!');
    - pada view berikan code berikut: 
      @if ($message = Session::get('status'))
        <div class="alert alert-danger alert-block">
            <button type="button" class="close" data-dismiss="alert">Ã—</button>
            <strong>{{ $message }}</strong>
        </div>
      @endif

15. Membuat upload image
    Paling atas tambahkan
    use File;
    
    - pada form berikan code berikut <form action="{{url('')}}" method="POST" enctype="multipart/form-data">
    - buatlah sebuah function :
      public function upadate(Request $request)
      {
        // cek kondisi apakah ada file yg di upload
        if($request->hasFile('foto_ktp')){
            $ktp = $request->file('foto_ktp')->getClientOriginalName(); //mengambil nama original foto
            $ktp = date('Y-m-d_His').$ktp; //memberi nama pada file foto
            $request->file('foto_ktp')->move(public_path().'/img/ktp', $ktp); memindahkan file foto kedalam folder public/img/ktp
        }
        // untuk remove foto 
        unlink(public_path('img/ktp'.'/'.$data->foto_ktp));
      }

16. Insert data menggunkan artisan tinker
    - bka terminal ketik php artisan tinker
    - setelah itu
    - $user = new \App\Models\User;
    - $user->name = "teguh wibowo"
    - $user->email = "teguh@gmail.com"
    - $user->password = bcrypt('rahasia')
    - $user->remember_token = bcrypt('rahasia')
    - $user->save()

17. cara bikin load view / menampilkan newtab pdf sebelum di download
    $filename = $berkas->berkas_turnitin;
    $path = storage_path('app/public/ujianproposal/'.$filename);

    return Response::make(file_get_contents($path), 200, [
        'Content-Type' => 'application/pdf',
        'Content-Disposition' => 'inline; filename="'.$filename.'"'
    ]);

18. Cara download file pada storage
    - pada view
      <td><a href="{{Storage::url('public/ujianproposal/'.$d->berkas_turnitin)}}" target="_blank"><i class="fa fa-download"></i></a></td>
